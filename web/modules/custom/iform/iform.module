<?php

/**
 * @file
 * Integrates Drupal with Indicia.
 */

use Drupal\Core\StreamWrapper\PrivateStream;
use Drupal\Core\StreamWrapper\PublicStream;
use Drupal\Core\Cache\Cache;
use Drupal\node\NodeInterface;
use Drupal\node\Entity\Node;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;
use IForm\ValidationException;

require_once 'iform.hostsite_api.inc';

define('IFORM_GRANT_ALL', 50);

global $_iform_base_resources;
$_iform_base_resources = [
  'jquery',
  'jquery_ui',
  'indiciaFns',
];

/**
 * Stores page specific warehouse connection info.
 *
 * If the loaded node connects to a non-standard warehouse, then stores the
 * URL, id and password in an array.
 *
 * @var array|bool
 */
global $_iform_warehouse_override;
$_iform_warehouse_override = FALSE;

/**
 * Implements hook_preprocess_node().
 *
 * Allows iform code to override the page header <title>.
 */
function iform_preprocess_html(&$variables) {
  global $_iform_page_title;
  if (isset($_iform_page_title)) {
    $variables['head_title'] = $_iform_page_title;
  }
}

/**
 * Implements hook_preprocess_page_title().
 *
 * Sets H1 element if defined programmatically.
 */
function iform_preprocess_page_title(&$variables) {
  global $_iform_page_title;
  if (isset($_iform_page_title)) {
    $variables['title'] = $_iform_page_title;
  }
}
/**
 * Implements hook_preprocess_node().
 *
 * Allows iform code to override the page title.
 */
function iform_preprocess_node(&$variables) {
  global $_iform_page_title;
  if (isset($_iform_page_title)) {
    $variables['label'] = $_iform_page_title;
  }
}

/**
 * Implements hook_help().
 *
 * Display help and module information.
 */
function iform_help($route_name) {
  $output = '';
  switch ($route_name) {
    case 'help.page.iform':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Generates Indicia powered data entry forms and reports.  <a href="!link">More info</a>.',
          ['!link' => 'http://indicia-docs.readthedocs.org/en/latest/site-building/iform/index.html']) . '</p>';
      return $output;
  }
  return $output;
}

/**
 * Returns a list of unique permission names.
 *
 * Permissions are generated by any Indicia node which uses the View access
 * control option.
 *
 * @return array
 *   List of permissions.
 */
function iform_all_permissions() {
  $cached = \Drupal::cache()->get('iform:permissions');
  if ($cached === FALSE) {
    // Get list of iform nodes
    $query = \Drupal::database()->select('node', 'n');
    $query->fields('n', ['nid']);
    $query->condition('type', "iform_page", "=");
    $nids = $query->execute();
    $permissions = [];
    foreach ($nids as $row) {
      $node = Node::load($row->nid);
      if ($node->field_iform->value && !empty($node->params['view_access_control'])) {
        if (empty($node->params['permission_name'])) {
          $permissions['access iform ' . $node->id()] = ['iform', $node->id()];
        }
        else {
          $permissions[$node->params['permission_name']] = [
            'iform ' . $node->params['permission_name'],
            IFORM_GRANT_ALL,
          ];
        }
      }
    }
    \Drupal::cache()->set('iform:permissions', $permissions, Cache::PERMANENT, ['node_list:iform_page']);
  } else {
    $permissions = $cached->data;
  }
  return $permissions;
}

/**
 * Implements hook_node_grants().
 */
function iform_node_grants(AccountInterface $account, $op) {
  $grants = [];
  $permissions = iform_all_permissions();
  foreach ($permissions as $permission => $grantInfo) {
    if ($account->hasPermission($permission)) {
      $grants[$grantInfo[0]] = [$grantInfo[1]];
    }
  }
  if ($op == 'view' && $account->hasPermission('access iform content')) {
    $grants['iform_view'] = [IFORM_GRANT_ALL];
  }

  if (($op == 'update' || $op == 'delete') && $account->hasPermission('admin iform')) {
    $grants['iform_edit'] = [IFORM_GRANT_ALL];
  }
  return $grants;
}

/**
 * Implements hook_node_access_records().
 *
 * Returns grants required to access a particular iform node.
 */
function iform_node_access_records(NodeInterface $node) {
  if ($node->getType() === 'iform_page') {
    // Invalidate our cache tag so that the permissions are reloaded.
    Cache::invalidateTags(['node_list:iform_page']);
    $grants = [];
    $grants[] = [
      'realm' => 'iform_edit',
      'gid' => IFORM_GRANT_ALL,
      'grant_view' => 1,
      'grant_update' => 1,
      'grant_delete' => 1,
    ];
    if ($node->isPublished()) {
      $hasAccessControl = isset($node->params['view_access_control']) && $node->params['view_access_control'];
      if ($hasAccessControl && empty($node->params['permission_name'])) {
        $realm = 'iform';
        $gid = $node->id();
      } elseif ($hasAccessControl) {
        $realm = 'iform ' . $node->params['permission_name'];
        $gid = IFORM_GRANT_ALL;
      }
      else {
        $realm = 'iform_view';
        $gid = IFORM_GRANT_ALL;
      }
      $grants[] = [
        'realm' => $realm,
        'gid' => $gid,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
      ];
    }
    return $grants;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Modifies the Edit form for an Indicia page to add the controls required to
 * configure an Indicia page.
 */
function iform_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'node_iform_page_form' || $form_id === 'node_iform_page_edit_form') {
    $node = $form_state->getFormObject()->getEntity();
    $iform = $node->field_iform->value;
    iform_load_helpers(['form_helper']);
    // @todo This needs to use $node to get the correct node specific connection
    $connection = iform_get_connection_details($node);
    if (empty($connection['base_url']) || empty($connection['website_id']) || empty($connection['password'])) {
      \Drupal::messenger()->addMessage(t('Indicia configuration is incomplete. Indicia pages cannot be set up until the warehouse settings are provided.'), 'warning');
      return;
    }
    // Define the new form fields.
    $form['iform_forms'] = [
      '#type' => 'details',
      '#title' => t('Form Selection'),
      '#weight' => 35,
    ];
    $config = \Drupal::config('iform.settings');
    $readAuth = form_helper::get_read_auth($connection['website_id'], $connection['password']);
    $form['iform_forms']['picker'] = [
      '#markup' => Markup::create(form_helper::prebuilt_form_picker($readAuth, [
        'form' => $iform,
        'base_url' => $connection['base_url'],
        'website_id' => $connection['website_id'],
        'password' => $connection['password'],
        'allowConnectionOverride' => $config->get('allow_connection_override'),
        'available_for_groups' => $node->field_available_for_groups->value === '1',
        'limit_to_group_id' => isset($node->field_limit_to_group_id->value) ? $node->field_limit_to_group_id->value : NULL,
      ])),
    ];
    if ($iform) {
      $form['form-params'] = [
        '#markup' => Markup::create(form_helper::prebuiltFormParamsForm([
          'form' => $iform,
          // @todo Load params properly from node
          'currentSettings' => $node->params,
          'readAuth' => form_helper::get_read_auth($connection['website_id'], $connection['password']),
        ])),
        '#prefix' => '<div id="form-params">',
        '#suffix' => '</div>',
        '#weight' => 36,
      ];
      form_helper::enable_validation('node-form');
    }
    else {
      $form['form-params'] = [
        // Must be a space or Drupal drops the div.
        '#markup' => ' ',
        '#prefix' => '<div id="form-params">',
        '#suffix' => '</div>',
        '#weight' => 36,
      ];
    }
  }
}

/**
 * Retrieves iform parameters.
 *
 * Retrieves the parameters required by an iform and creates a JSON string to
 * store them in the database. The iform data must be in the $_POST array or in
 * the node if not in the $_POST.
 *
 * @return string
 *   JSON encoded string containing the parameter values.
 */
function get_custom_param_values($node) {
  // We need to grab the parameter values for the custom parameters that were
  // defined by the form.
  if (isset($_POST['iform']) && $_POST['iform'] != -1) {
    iform_load_helpers(['form_helper']);
    ob_start();
    $connection = iform_get_connection_details($node);
    $readAuth = form_helper::get_read_auth($connection['website_id'], $connection['password']);
    $params = form_helper::getFormParameters($_POST['iform'], $readAuth);
    ob_end_clean();
    $values = [];
    // Always want the website id and password.
    $values['website_id'] = $_POST['website_id'];
    $values['password'] = $_POST['password'];
    if (!empty($_POST['base_url'])) {
      $values['base_url'] = $_POST['base_url'];
    }
    // Now get the rest of the parameters.
    foreach ($params as $param) {
      if (isset($_POST[$param['fieldname']])) {
        $values[$param['fieldname']] = $_POST[$param['fieldname']];
      }
    }
    // Json encode the parameters to store them in the Drupal database.
    return json_encode($values);
  }
  else {
    return json_encode($node->params);
  }
}

/**
 * Implements hook_ENTITY_presave().
 *
 * Saves iform specific information.
 */
function iform_node_presave(EntityInterface $entity) {
  if ($entity->bundle() === 'iform_page' && isset($_POST['iform'])) {
    $iform = $_POST['iform'];
    $entity->field_iform->setValue($iform);
    $params = get_custom_param_values($entity);
    $entity->field_params->setValue($params);
    $entity->field_available_for_groups->setValue(
      empty($_POST['available_for_groups']) ? '0' : '1'
    );
    $entity->field_limit_to_group_id->setValue(
      empty($_POST['limit_to_group_id']) ? NULL : $_POST['limit_to_group_id']
    );
    // @todo limit_to_group_id
  }
}

/**
 * Implemenation of hook_entity_load().
 *
 * Updates the iform node objects so that their params property contains a
 * decoded array of parameters rather than a JSON object.
 */
function iform_node_load(array $entities) {
  foreach ($entities as &$node) {
    if ($node->bundle() === 'iform_page') {
      // Get the parameters, using the translated version if necessary.
      $currentLang = \Drupal::languageManager()->getCurrentLanguage()->getId();
      $translationsAvailable = array_keys($node->getTranslationLanguages());
      if ($currentLang !== \Drupal::languageManager()->getDefaultLanguage()->getId()
          && in_array($currentLang, $translationsAvailable)) {
        $translation = $node->getTranslation($currentLang);
        $params = json_decode($translation->field_params->value, TRUE);
      }
      else {
        $params = json_decode($node->field_params->value, TRUE);
      }
      unset($node->params);
      $node->params = [];

      if (function_exists('iform_user_ui_options_preprocess_iform')) {
        iform_user_ui_options_preprocess_iform($params);
      }
      if (!is_array($params)) {
        \Drupal::messenger()->addMessage(t("This page's configuration has not been stored correctly.") . ' ' .
          $node->field_params->value, 'warning');
      }
      if (is_array($params)) {
        // Merge the params into the loaded object.
        foreach ($params as $k => $v) {
          $node->params[$k] = $v;
        }
        // For the currently loading node only, we might want to globally
        // switch to a different warehouse. Can't use routeMatch as the node is
        // not yet loaded!
        if (\Drupal::service('path.current')->getPath() === '/node/' . $node->id()
             && isset($node->params['base_url'])) {
          $config = \Drupal::config('iform.settings');
          if ($config->get('allow_connection_override')) {
            iform_load_helpers(['data_entry_helper']);
            if ($node->params['base_url'] !== data_entry_helper::$base_url) {
              global $_iform_warehouse_override;
              $_iform_warehouse_override = [
                'base_url' => $node->params['base_url'],
                'website_id' => $node->params['website_id'],
                'password' => $node->params['password'],
              ];
              data_entry_helper::$base_url = $node->params['base_url'];
              iform_setup_cache_folder();
            }
          }
        }
      }
    }
  }
}

/**
 * Implement hook_form_user_login_alter.
 * Adds instructions to the login form if accessed via a link given out to join a recording group.
 * @param $form
 * @param $form_state
 * @throws \exception
 *
function iform_form_user_login_alter(&$form, &$form_state) {
  if (!empty($_GET['group_id'])) {
    iform_load_helpers(array('data_entry_helper'));
    $auth = data_entry_helper::get_read_auth(variable_get('indicia_website_id'), variable_get('indicia_password'));
    $groups = data_entry_helper::get_population_data(array(
      'table' => 'group',
      'extraParams' => $auth + array(
          'view' => 'detail',
          'id' => $_GET['group_id'],
          'joining_method' => 'P',  // only public groups can be joined this way
          'website_id' => variable_get('indicia_website_id')
        ),
      'caching' => false
    ));
    if (count($groups)===1) {
      Drupal::moduleHandler()->loadInclude('iform', 'inc', 'iform.groups');
      $group = $groups[0];
      $link = url("join/$group[url_safe_title]", array('absolute' => TRUE));
      $path = data_entry_helper::get_uploaded_image_folder();
      $img = empty($group['logo_path']) ? '' : "<img style=\"width: 20%; float: left; padding-right: 5%\" alt=\"Logo\" src=\"$path$group[logo_path]\"/>";
      $form['intro'] = array(
        '#markup' => "<fieldset><legend>$group[title]</legend>$img<div style=\"float: left; width: 70%\"><p>" .
          t('You\'ve followed a link to join the @group. This needs you to log in to @site.',
            array('@group' => iform_readable_group_title($group), '@site' => variable_get('site_name'))) . '</p><ul>' .
          '<li>' . t('If you already have an account on @site, then log in using the form below.', array('@site' => variable_get('site_name'))) . '</li>' .
          '<li>' . t('If this is your first time using @site, then click the Create new account link and follow the steps to register. Once you have ' .
            'confirmed your account please visit the join link you just used (<a href="@link">@link</a>) to join the @group.',
            array('@group' => iform_readable_group_title($group), '@site' => variable_get('site_name'), '@link' => $link)) .'</li></ul></div></fieldset>',
        '#weight' => -50
      );
    }
  }
}

/**
 * Utility method that gets the base_url, website_id and password appropriate to connect
 * a given node to the warehouse.
 * @param mixed $node A node object or nid.
 * @return array Connection details, including website_id and password. Also
 * contains a boolean using_drupal_vars which is true if the site-wide
 * configuration is being used.
 */
function iform_get_connection_details($node = NULL) {
  // Node is not null and override set for this node, use it.
  // Node is not null load node,
  //   and has override settings - use them and store them.
  global $_iform_warehouse_override;

  // If we don't know the node but the current node overrides the config, use
  // the override.
  if ($node === NULL && $_iform_warehouse_override) {
    return $_iform_warehouse_override;
  }
  // Load the default config.
  $config = \Drupal::config('iform.settings');
  $r = [
    'base_url' => $config->get('base_url'),
    'website_id' => $config->get('website_id'),
    'password'  => $config->get('password'),
  ];
  if ($node && $config->get('allow_connection_override')) {
    if (!is_object($node))
      $node = \Drupal\node\Entity\Node::load($node);
    if (isset($node->params['base_url']) && $node->params['base_url'] !== $r['base_url']) {
      iform_load_helpers(['data_entry_helper']);
      $r['base_url'] = $node->params['base_url'];
    }
    if (isset($node->params['website_id'])) {
      $r['website_id'] = $node->params['website_id'];
    }
    if (isset($node->params['password'])) {
      $r['password'] = $node->params['password'];
    }
  }
  return $r;
}

/**
 * Implementation for hook_node_view. Prepares the displayed Indicia page content.
 */
function iform_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() === 'iform_page' && $view_mode !== 'search_index') {
    global $language;
    iform_load_helpers(['data_entry_helper', 'form_helper'], empty($entity->params['base_url']) ? '' : $entity->params['base_url']);
    // @todo Drupal 8 might allow us to be more intelligent rather than killing the entire page cache
    \Drupal::service('page_cache_kill_switch')->trigger();
    $helperPath = realpath(iform_client_helpers_path());
    $iform = $entity->field_iform->value;
    if (!empty($iform)) {
      $nid = $entity->id();
      data_entry_helper::$indiciaData['nid'] = $nid;
      if (\Drupal::service('module_handler')->moduleExists('eu_cookie_compliance')) {
        data_entry_helper::$indiciaData['cookieCompliance'] = 'eu_cookie_compliance';
      }
      iform_load_language_files($iform, $nid);
      $language = \Drupal::languageManager()->getCurrentLanguage();
      $args = ['language' => $language->getId()];

      // Require the file containing the code for the $iform.
      if (\Drupal::moduleHandler()->moduleExists('iform_custom_forms')) {
        // Enable autoloader for classes in iform_custom_forms module.
        $iformCustomFormsList = \Drupal::service('iform_custom_forms.list');
      }
      if (!class_exists("iform_$iform")) {
        require_once "$helperPath/prebuilt_forms/$iform.php";
      }

      ob_start();
      // Also force the theme path to be local.
      global $indicia_theme_path;
      $indicia_theme_path = iform_media_folder_path() . 'themes/';
      $connection = iform_get_connection_details($entity);
      $readAuth = form_helper::get_read_auth($connection['website_id'], $connection['password']);
      $args['base_url'] = $connection['base_url'];
      $args['website_id'] = $connection['website_id'];
      $args['password'] = $connection['password'];
      $args['available_for_groups'] = $entity->field_available_for_groups->value;
      if (isset($entity->limit_to_group_id->value)) {
        $args['limit_to_group_id'] = $entity->limit_to_group_id->value;
      }
      // We need to grab each requested parameter from the node to pass to the
      // form.
      $params = form_helper::getFormParameters($iform, $readAuth);

      foreach ($params as $param) {
        if (isset($entity->params[$param['fieldname']])) {
          $args[$param['fieldname']] = $entity->params[$param['fieldname']];
        }
        elseif (isset($param['default'])) {
          // Apply the default, this was an old saved form configuration which
          // doesn't have a new parameter.
          $args[$param['fieldname']] = $param['default'];
        }
      }
      $r = '';
      $response = NULL;
      // If the form defines some remembered fields, call it from within this
      // module rather than inside indicia so it can have access to the
      // arguments.
      if (method_exists("iform_$iform", 'indicia_define_remembered_fields')) {
        call_user_func([
          "iform_$iform",
          'indicia_define_remembered_fields',
        ], $args);
      }
      $r .= iform_handle_posted_form($entity, $args, $response);

      // Make buttons have a hover effect.
      data_entry_helper::$javascript .= "indiciaFns.enableHoverEffect();\n";
      $config = \Drupal::config('iform.settings');
      _iform_apply_variables_to_args($args, $config);
      // Preferred location for custom node configuration files now under
      // Drupal files folder.
      $filePath = hostsite_get_public_file_path();
      // A drupal theme can override the templates.
      if (file_exists(\Drupal::theme()
        ->getActiveTheme()
        ->getPath() . '/indicia.templates.php')) {
        require \Drupal::theme()
          ->getActiveTheme()
          ->getPath() . '/indicia.templates.php';
      }
      // Or we can override the templates in the iform module, either globally,
      // per form or per node.
      if (file_exists("$helperPath/prebuilt_forms/templates/global.php")) {
        require "$helperPath/prebuilt_forms/templates/global.php";
      }
      if (file_exists("$helperPath/prebuilt_forms/templates/$iform.php")) {
        require "$helperPath/prebuilt_forms/templates/$iform.php";
      }
      if (file_exists("$filePath/indicia/templates/node.$nid.php")) {
        require "$filePath/indicia/templates/node.$nid.php";
      }
      // Templates may also come from the iform_custom_forms module.
      if (isset($iformCustomFormsList)){
        $searchTemplates = ['global.php', "$iform.php", "node.$nid.php"];
        $customTemplates = $iformCustomFormsList->getCustomisations()['templates'];
        foreach ($searchTemplates  as $searchTemplate) {
          if (array_key_exists($searchTemplate, $customTemplates)){
            require $iformCustomFormsList->getAbsoluteModulePath() .
                    '/' . $customTemplates[$searchTemplate] .
                    '/' . $searchTemplate;
          }
        }
      }
      // Link in custom additional template files.
      if (!empty($args['additional_templates'])) {
        $templateFiles = data_entry_helper::explode_lines($args['additional_templates']);
        foreach ($templateFiles as $file) {
          $file = str_replace('{prebuiltformtemplates}', "$helperPath/prebuilt_forms/templates", $file);
          require $file;
        }
      }
      // Now retrieve the form content.
      try {
        $r .= call_user_func([
          'iform_' . $iform,
          'get_form',
        ], $args, $entity->id(), $response);
      } catch (Exception $e) {
        \Drupal::logger('iform')->notice('Error occurred loading form');
        \Drupal::logger('iform')->notice($e->getMessage());
        \Drupal::logger('iform')->notice($e->getTraceAsString());
        $r .= $e->getMessage();
      }
      ob_end_clean();
      $build['iform'] = [
        '#markup' => Markup::create($r),
        '#weight' => 1,
        '#cache' => [
          'contexts' => [
            // The "current user" is used above, which depends on the request,
            // so we tell Drupal to vary by the 'user' cache context.
            // @todo Could we separate out the user specific content and token specific content
            // into a separate build array entry, then use JS to copy it into it's destinations?]
            // Then whole page can get cached
            'user',
          ],
          // @todo currently we've disabled caching until we work out handling of write tokens
          'max-age' => 0,
        ],
      ];
    }
  }
}

/**
 * Handle posting an Indicia form.
 *
 * When an Indicia form sends POST data back, this method handles the
 * submission of the data to the warehouse.
 *
 * @param object $node
 *   Node object.
 * @param array $args
 *   Form arguments.
 *
 * @return string|void
 */
function iform_handle_posted_form($node, array $args, &$response) {
  $iform = $node->field_iform->value;
  $r = '';
  if ($_POST && (array_key_exists('website_id', $_POST)) && method_exists("iform_$iform", 'get_submission')) {
    $helperPath = realpath(iform_client_helpers_path());
    $nid = $node->id();
    if (!empty($_POST['delete-button'])) {
      $_POST['deleted'] = 't';
    }
    // Ask the form to submit itself.
    try {
      // Attach the path to the input form for new samples. It'll just get
      // skipped if we are not posting a sample.
      if (empty($_POST['sample:id'])) {
        $_POST['sample:input_form'] = trim(\Drupal::service('path_alias.manager')
          ->getAliasByPath("/node/$nid"), '/');
      }
      $s = call_user_func([
        "iform_$iform",
        'get_submission',
      ], $_POST, $args, $nid);
    } catch (Exception $e) {
      \Drupal::logger('iform')
        ->notice('Exception occurred during build of form submission: ' . $e->getMessage());
      $msg = t('An error occurred whilst saving the information.');
      if ($e instanceof ValidationException) {
        $msg .= lang::get($e->getMessage());
      }
      return data_entry_helper::dump_errors([
        'errors' => [$e->fieldname => $msg],
        // Server validation code.
        'code' => 2003,
      ]);
    }
    // And allow the form or calling URL to dynamically set the destination
    // after post.
    if (!empty($_REQUEST['redirect_on_success'])) {
      $args['redirect_on_success'] = $_REQUEST['redirect_on_success'];
    }
    if (method_exists("iform_$iform", 'get_redirect_on_success')) {
      $redirect = call_user_func([
        "iform_$iform",
        'get_redirect_on_success',
      ], $_POST, $args);
      if (!empty($redirect)) {
        $args['redirect_on_success'] = $redirect;
      }
    }
    // if for some reason the iform gives back an empty submission, ignore it
    if (isset($s) && $s) {
      $errors = [];
      // does this Drupal node have any in-built validation code?
      if (method_exists("iform_$iform", 'get_validation_errors')) {
        $errors = call_user_func([
          "iform_$iform",
          'get_validation_errors',
        ], $_POST, $args);
      }

      // Does this Drupal node have any custom validation code?
      $validation_path = '';
      // Preferred location for custom validation code in iform_custom_forms
      // module.
      if (\Drupal::moduleHandler()->moduleExists('iform_custom_forms')) {
        $iformCustomFormsList = \Drupal::service('iform_custom_forms.list');
        $customValidationsFiles = $iformCustomFormsList->getCustomisations()['validation'];
        $file = "node.$nid.php";
        if (array_key_exists($file, $customValidationsFiles)) {
          $validation_path = $iformCustomFormsList->getAbsoluteModulePath() .
            '/' . $customValidationsFiles[$file] .
            '/' . $file;
        }
      }

      if (empty($validation_path)) {
        // Check legacy locations for validation files.
        $legacy_path = "$helperPath/prebuilt_forms/validation/validate.$nid.php";
        // Alternative location for custom node validation files under
        // Drupal files folder.
        $filePath = hostsite_get_public_file_path();
        $new_path = "$filePath/indicia/validation/node.$nid.php";
        if (file_exists($legacy_path)) {
          $validation_path = $legacy_path;
        }
        elseif (file_exists($new_path)) {
          $validation_path = $new_path;
        }
      }

      if (!empty($validation_path)) {
        require_once $validation_path;
        $errors = array_merge($errors, iform_custom_validation($_POST));
      }

      if (!empty($errors)) {
        $r .= data_entry_helper::dump_errors(['errors' => $errors]);
      }
      else {
        $response = data_entry_helper::forward_post_to('save', $s);
        // Clear the Drupal cache tag so user record based reports refresh.
        Cache::invalidateTags(['user_records:' . hostsite_get_user_field('indicia_user_id')]);
        if (is_array($response) && array_key_exists('success', $response)) {
          if (!empty($_POST['delete-button'])) {
            $op = 'D';
          }
          elseif (!empty($_POST["$s[id]:id"])) {
            $op = 'U';
          }
          else {
            $op = 'C';
          }
          $msg = data_entry_helper::getSuccessMessage($response, $op);
          \Drupal::moduleHandler()->invokeAll('iform_after_submit', [
            $s,
            $op,
            $response,
            &$msg,
          ]);
          if (!isset($args['message_after_save']) || $args['message_after_save']) {
            \Drupal::messenger()->addMessage($msg);
          }
        }
        // Does the form redirect after success?
        if (is_array($response) && array_key_exists('success', $response) &&
          array_key_exists('redirect_on_success', $args) && $args['redirect_on_success']
        ) {
          $parts = explode('?', $args['redirect_on_success'], 2);
          // First item removed from array.
          $url = array_shift($parts);
          if (count($parts)) {
            $parts = explode('#', $parts[0], 2);
            // Info between the ? and # is the query string.
            $queryStr = array_shift($parts);
            // Get an array of the redirect_on_success specified query string
            // params.
            parse_str($queryStr, $params);
          }
          else {
            // Split bookmark fragment off.
            $parts = explode('#', $url, 2);
            $url = array_shift($parts);
            $params = [];
          }
          // pass through $_GET parameters
          $params = array_merge($_GET, $params);
          // Merge the information about the saved record in
          $idKey = array_search('{id}', $params);
          if ($idKey) {
            $params[$idKey] = $response['outer_id'];
          }
          else {
            $params = array_merge(array(
              'table' => $response['outer_table'],
              'id' => $response['outer_id'],
            ), $params);
          }
          $replacements = preg_grep('/\{[a-z_]+\}/', $params);
          foreach ($replacements as $key => $value) {
            $params[$key] = $_GET[str_replace(['{', '}'], '', $value)];
          }
          // anything left in $parts is the bookmark
          $fragment = count($parts) ? $parts[0] : false;
          return hostsite_goto_page($url, $params, $fragment);
        }
        elseif (!array_key_exists('success', $response)) {
          $r .= data_entry_helper::dump_errors($response, TRUE);
        }
      }
    }
  }
  return $r;
}

/**
 * Implements hook_library_info_build.
 *
 * Dynamically build a set of Drupal 8 asset libraries. In Drupal 8, drupal_add_js and
 * drupal_add_css are removed with the definition of libraries to define the assets required
 * now the preferred way forward. This method creates a list of libraries that might be
 * required by the Indicia forms module, including libraries for the general client helper
 * code and libraries containing JS and CSS specific to each node.
 * @return array Libraries to create
 */
function iform_library_info_build() {
  $libraries = [];
  iform_build_client_helper_libraries($libraries);
  iform_build_node_specific_libraries($libraries);
  return $libraries;
}

/**
 * Creates the asset libraries for Drupal which provide the JS and CSS files for
 * client helper resource.
 * @param $libraries Array of library definitions to which the required libraries will
 * be appended.
 */
function iform_build_client_helper_libraries(&$libraries) {
  iform_load_helpers(array('data_entry_helper'));
  global $_iform_base_resources;
  $resources = data_entry_helper::get_resources();
  $fullPaths = array(data_entry_helper::$css_path, data_entry_helper::$js_path, 'http://');
  $shortPaths = array('media/css/', 'media/js/', '//');
  foreach ($resources as $name => $def) {
    // some resources are always included, forcing the Drupal version of jQuery.
    if (in_array($name, $_iform_base_resources))
      continue;
    $libraries[$name] = [
      'version' => 'VERSION'
    ];
    if (!empty($def['javascript'])) {
      $libraries[$name]['js'] = [];
      foreach ($def['javascript'] as $js) {
        $libraries[$name]['js'][str_replace($fullPaths, $shortPaths, $js)] = [];
      }
    }
    if (!empty($def['stylesheets'])) {
      $libraries[$name]['css'] = ['component' => []];
      foreach ($def['stylesheets'] as $css) {
        $libraries[$name]['css']['component'][str_replace($fullPaths, $shortPaths, $css)] = [];
      }
    }
    if (!empty($def['deps'])) {
      $libraries[$name]['dependencies'] = ['iform/base'];
      foreach ($def['deps'] as $dependency) {
        if (!in_array($dependency, $_iform_base_resources)) {
          $libraries[$name]['dependencies'][] = "iform/$dependency";
        }
      }
    }
  }
}

/**
 * Creates the asset libraries for Drupal which provide the JS and CSS files specific
 * to each node.
 * @param $libraries Array of library definitions to which the required libraries will
 * be appended.
 */
function iform_build_node_specific_libraries(&$libraries) {
  $nids = \Drupal::entityQuery('node')
    ->condition('type', 'iform_page')
    ->accessCheck(FALSE)
    ->execute();
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  $nodes = $node_storage->loadMultiple($nids);
  $helperPath = realpath(iform_client_helpers_path());
  $filePath = hostsite_get_public_file_path();
  foreach ($nodes as $node) {
    $nid = $node->id();
    $lib = "node_$nid";
    $form = $node->field_iform->value;
    $libraries[$lib] = [
      'version' => 'VERSION',
      'js' => [],
      'css' => [
        'base' => []
      ]
    ];
    // Prebuilt form specific CSS
    if (file_exists("$helperPath/prebuilt_forms/css/$form.css")) {
      $libraries[$lib]['css']['base']["client_helpers/prebuilt_forms/css/$form.css"] = [];
    }
    // Node specific CSS
    if (file_exists("$filePath/indicia/css/node.$nid.css")) {
      $libraries[$lib]['css']['base']["/$filePath/indicia/css/node.$nid.css"] = [];
    }
    if (file_exists("$helperPath/prebuilt_forms/css/node.$nid.css")) {
      $libraries[$lib]['css']['base']["client_helpers/prebuilt_forms/css/node.$nid.css"] = [];
    }
    if (!empty($node->params['additional_css'])) {
      $cssFiles = data_entry_helper::explode_lines($node->params['additional_css']);
      // @todo Theme path replacement
      // @todo Also need to implement way to get to public::indicia/css folder.
      foreach ($cssFiles as $file) {
        $file = str_replace([
            '{mediacss}',
            //'{theme}',
            '{prebuiltformcss}',
          ],
          [
            'media/css',
            //path_to_theme(),
            'client_helpers/prebuilt_forms/css',
          ],
          $file
        );
        $libraries[$lib]['css']['component'][$file] = [];
      }
    }
    // Prebuilt form specific JS
    if (file_exists("$helperPath/prebuilt_forms/js/$form.js")) {
      $libraries[$lib]['js']["client_helpers/prebuilt_forms/js/$form.js"] = [];
    }
    // Node specific JS
    if (file_exists("$filePath/indicia/js/node.$nid.js")) {
      $libraries[$lib]['js']["/$filePath/indicia/js/node.$nid.js"] = [];
    }
    if (file_exists("$helperPath/prebuilt_forms/js/node.$nid.js")) {
      $libraries[$lib]['js']["client_helpers/prebuilt_forms/js/node.$nid.js"] = [];
    }
    // Extension classes can be referred to in the form structure parameter of any page
    // and can contain JS or CSS code in addition to the PHP class.
    if (!empty($node->params['structure'])) {
      if (preg_match_all('/\[[a-z_]+\.[a-z_]+\]/', $node->params['structure'], $extensions)) {
        foreach ($extensions[0] as $extension) {
          preg_match('/\[(?P<class>[a-z_]+)/', $extension, $matches);
          if (file_exists("$helperPath/prebuilt_forms/extensions/$matches[class].js"))
            $libraries[$lib]['js']["client_helpers/prebuilt_forms/extensions/$matches[class].js"] = [];
          if (file_exists("$helperPath/prebuilt_forms/extensions/$matches[class].css")) {
            $libraries[$lib]['css']['base']["client_helpers/prebuilt_forms/extensions/$matches[class].css"] = [];
          }
        }
      }
    }
    // Skip any unnecessary empty libraries
    if (empty($libraries[$lib]['css']['base']) && empty($libraries[$lib]['js'])) {
      unset($libraries[$lib]);
    }
  }
}

/**
 * @todo Document
 * @param $args
 */
function _iform_apply_variables_to_args(&$args, $config) {
  _iform_apply_variable_to_args('map_centroid_lat', $args, $config);
  _iform_apply_variable_to_args('map_centroid_long', $args, $config);
  _iform_apply_variable_to_args('map_zoom', $args, $config);
  _iform_apply_variable_to_args('spatial_systems', $args, $config);
}

/**
 * @todo Document
 * @param $variable
 * @param $args
 * @param $config
 */
function _iform_apply_variable_to_args($variable, &$args, $config) {
  $default = $config->get($variable);
  if (isset($args[$variable]) && ((string) $args[$variable] == t('default') || $args[$variable] == 'default' || $args[$variable] == '') && !empty($default)) {
    $args[$variable] = $default;
  }
}

/**
 * Implements hook_preprocess_page().
 *
 * We use this to detect messages set before a redirection and show them on the
 * redirected page. A bit of custom handling required here because under Drupal
 * 8 messenger service messages are cleared when you redirect, so we have to
 * store them in a custom session var to ensure they aren't lost.
 */
function iform_preprocess_page(&$variables) {
  if (isset($_SESSION['iform-messages']) && $_SESSION['iform-redirect-from'] !== hostsite_get_current_page_path()) {
    foreach ($_SESSION['iform-messages'] as $message) {
      \Drupal::messenger()->addMessage($message[0]);
    }
    unset($_SESSION['iform-messages']);
  }
}

/**
 * Implements hook_page_attachments().
 *
 * For any page that has Indicia functionality, add all the scripts and CSS that
 * we require.
 */
function iform_page_attachments(array &$attachments) {
  if (hostsite_get_user_field('training', false)) {
    $message = t('You are in training mode. Records you add will be for training purposes only and you can only see training records.');
    \Drupal::messenger()->addWarning($message);
  }
  if (class_exists('helper_base')) {
    global $_iform_base_resources;
    $attachments['#attached']['library'][] = 'iform/base';
    $config = \Drupal::config('iform.settings');
    // Attach theme specific library.
    $baseTheme = $config->get('base_theme');
    $baseTheme = $baseTheme ? $baseTheme : 'generic';
    $attachments['#attached']['library'][] = "iform/theme.$baseTheme";
    foreach (helper_base::$required_resources as $resource) {
      // exclude resources covered by iform/base
      if (!in_array($resource, $_iform_base_resources)) {
        $attachments['#attached']['library'][] = "iform/$resource";
      }
    }
    $node = \Drupal::request()->attributes->get('node');
    if ($node) {
      $nid = $node->id();
      $attachments['#attached']['library'][] = "iform/node_$nid";
    }
  }
}

/**
 * Implements hook__inlinescript_alter().
 *
 * Add the JS code that is generated by the helper classes to the page.
 *
 * @return array
 *   Script assets.
 */
function iform_inlinescript_alter() {
  $js_asset = [];
  if (class_exists('helper_base')) {
    helper_base::setup_jquery_validation_js();
    $script = helper_base::getIndiciaData();
    $script .= helper_base::get_scripts(helper_base::$javascript, helper_base::$late_javascript,
      helper_base::$onload_javascript, FALSE, TRUE);
    if (!empty($script)) {
      $js_asset[] = [
        'data' => $script,
      ];
      /*
       * Don't do the following, as this gets called once for the header and
       * once for the footer JS regions.
       */
      //helper_base::$javascript = '';
      //helper_base::$late_javascript = '';
      //helper_base::$onload_javascript = '';
    }
    return $js_asset;
  }
}

/**
 * Adds a jQuery closure around a piece of JavaScript for D7/8 compatibility.
 * @param type $js
 */
function iform_js_closure($js) {
  return "(function ($) {
$js
})(jQuery);";
}

/**
 * Loads language files defined for the form. This includes language files defined in the module folder or in the site specific
 * Drupal folders, and also includes files named with the form name or node nid.
 */
function iform_load_language_files($iform, $nid) {
  global $language, $custom_terms, $custom_term_overrides;
  if (function_exists('t') && !empty(helper_base::$delegate_translation_to_hostsite)) {
    $languageId = 'en';
  }
  else {
    $languageId = \Drupal::service('language.default')->get()->getId();
  }
  $moduleLangFilePath = iform_client_helpers_path() . "prebuilt_forms/lang/";
  $filepath = PrivateStream::basePath();
  if (!$filepath) {
    $filepath = PublicStream::basePath();
  }
  $filesLangFilePath = "$filepath/indicia/lang/";
  $formLangFileName = $iform . '.' . $languageId . '.php';
  $nodeLangFileName = 'node.' . $nid . '.' . $languageId . '.php';
  $formFallbackFileName = $iform . '.en.php';
  $nodeFallbackFileName = 'node.' . $nid . '.en.php';

  // Look for files provided by iform_custom_forms module.
  $langFiles = [];
  if (\Drupal::moduleHandler()->moduleExists('iform_custom_forms')) {
    $iformCustomFormsPath = \Drupal::service('extension.list.module')->getPath('iform_custom_forms');
    $iformCustomFormsList = \Drupal::service('iform_custom_forms.list');
    $customLangFiles = $iformCustomFormsList->getCustomisations()['lang'];
    if (array_key_exists($nodeLangFileName, $customLangFiles)) {
      // Found a node file
      $langFiles[] = $iformCustomFormsPath .
                      '/' . $customLangFiles[$nodeLangFileName] .
                      '/' . $nodeLangFileName;
    }
    if (array_key_exists($formLangFileName, $customLangFiles)) {
      // Found a form file
      $langFiles[] = $iformCustomFormsPath .
                      '/' . $customLangFiles[$formLangFileName] .
                      '/' . $formLangFileName;
    }
  }

  // Define a priority ordered list of file names that could contain the custom terms list.
  $langFiles = array_merge($langFiles, [
    $filesLangFilePath . $nodeLangFileName,
    $filesLangFilePath . $formLangFileName,
    $filesLangFilePath . $nodeFallbackFileName,
    $filesLangFilePath . $formFallbackFileName,
    $filesLangFilePath . 'default.' . $languageId . '.php',
    $moduleLangFilePath . $nodeLangFileName,
    $moduleLangFilePath . $formLangFileName,
    $moduleLangFilePath . $nodeFallbackFileName,
    $moduleLangFilePath . $formFallbackFileName
  ]);

  $custom_terms = []; // this is an array of key value pairs
  $custom_term_overrides = []; // this is an array with each item a subarray of key value pairs.
  // start at the highest priority possible language file name and loop through until we find one that defines the set of custom terms.
  foreach ($langFiles as $langFile) {
    if (file_exists($langFile)) // Found a file to include. It might define custom_terms, or might define an entry in the custom_term_overrides array
    {
      require $langFile;
    }
    // finish when we have loaded an array of custom terms.
    if (count($custom_terms) > 0) {
      break;
    }
  }
  // if there are any custom term overrides, they need to be merged into custom terms in reverse priority order.
  $custom_term_overrides = array_reverse($custom_term_overrides);
  foreach ($custom_term_overrides as $override_list) {
    $custom_terms = array_merge($custom_terms, $override_list);
  }
}

/**
 * Method to load an array of helper classes. Also overrides any helper config settings
 * for those classes from drupal variable settings.
 * @param array $files List of helper class names to load.
 * @param string $base_url Warehouse base URL. Only required if overriding the default.
 */
function iform_load_helpers(array $files, $base_url='') {
  static $indiciaConfigLoaded = FALSE;
  $config = \Drupal::config('iform.settings');
  if (!is_array($files)) {
    throw new exception('Call to iform_load_helpers must pass an array of helper file names');
  }
  $path = iform_client_helpers_path();
  require_once $path . 'autoload.php';
  require_once $path . 'helper_base.php';
  // If using a specified theme, load the theme specific PHP file which could, for example, override templates etc.
  $baseTheme = $config->get('base_theme');
  $baseTheme = $baseTheme ? $baseTheme : 'generic';
  if ($baseTheme !== 'generic') {
    include_once $path . "templates.$baseTheme.php";
  }
  // Load the actual helper files.
  foreach ($files as $file) {
    require_once "$path$file.php";
  }
  if (!$indiciaConfigLoaded) {
    // Now we have an opportunity to load warehouse settings into helper_base
    // from the drupal variables. So a module could load a different warehouse
    // per page.
    if (function_exists('iform_load_warehouse_details')) {
      iform_load_warehouse_details();
    }
    else {
      helper_base::$base_url = empty($base_url) ? $config->get('base_url') : $base_url;
      helper_base::$geoserver_url = $config->get('geoserver_url');
    }
    if (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS']!=='off') {
      helper_base::$base_url = preg_replace('/^http:/', 'https:', helper_base::$base_url);
      helper_base::$geoserver_url = preg_replace('/^http:/', 'https:', helper_base::$geoserver_url);
    }
    if (!helper_base::$cache_folder) {
      iform_setup_cache_folder();
    }
    // interim_image_folder
    if (!isset(helper_base::$interim_image_folder)) {
      // Always create path into public files folder.
      $filePath = hostsite_get_public_file_path();
      helper_base::$interim_image_folder = "$filePath/indicia/upload/";
      if (!is_dir(helper_base::$interim_image_folder)) {
        mkdir(helper_base::$interim_image_folder, 0777, true);
      }
    }
    helper_base::$google_api_key = $config->get('google_api_key');
    helper_base::$google_maps_api_key = $config->get('google_maps_api_key');
    helper_base::$os_api_key = helper_base::$os_api_key = $config->get('os_api_key');
    helper_base::$bing_api_key = helper_base::$bing_api_key = $config->get('bing_api_key');
    $indiciaConfigLoaded = TRUE;
  }
  // Ensure css and js is loaded locally. Use global as base_url() not available
  // if bootstrapped too early.
  global $base_path;
  helper_base::$js_path = ($base_path ?: '/') . iform_media_folder_path() . 'js/';
  helper_base::$css_path = ($base_path ?: '/') . iform_media_folder_path() . 'css/';
  helper_base::$images_path = ($base_path ?: '/') . iform_media_folder_path() . 'images/';
}

/**
 * Ensure the cache folder is unique per warehouse base URL.
 */
function iform_setup_cache_folder() {
  // Path unique to the warehouse, so no problems if we switch warehouse.
  $folder = preg_replace("/[^a-zA-Z0-9]+/", "", helper_base::$base_url);
  // cache folder into private file path if specified as its more secure, otherwise public.
  $filepath = PrivateStream::basePath();
  if (!$filepath) {
    $filepath = PublicStream::basePath();
  }
  helper_base::$cache_folder = "$filepath/indicia/cache/$folder/";
  if (!is_dir(helper_base::$cache_folder)) {
    mkdir(helper_base::$cache_folder, 0777, TRUE);
  }
}

/**
 * Method to find the media folder - either in the module or library path.
 */
function iform_media_folder_path() {
  // avoid multiple is_dir calls
  static $_iform_media_folder_path;
  if (isset($_iform_media_folder_path)) {
    return $_iform_media_folder_path;
  }
  else {
    $r = \Drupal::service('extension.path.resolver')->getPath('module', 'iform') . '/media/';
    if (!is_dir($r)) {
      $r = str_replace('modules', 'libraries', $r);
    }
    $_iform_media_folder_path = $r;
    return $r;
  }
}

/**
 * Method to find the client helpers folder - either in the module or library path.
 */
function iform_client_helpers_path() {
  // avoid multiple is_dir calls
  static $_iform_client_helpers_path;
  if (isset($_iform_client_helpers_path)) {
    return $_iform_client_helpers_path;
  }
  else {
    $path = \Drupal::service('extension.path.resolver')->getPath('module', 'iform') . '/client_helpers/';
    // if not in subfolder of the module, then it has been moved to libraries
    if (!is_dir($path)) {
      $path = str_replace('/modules/', '/libraries/', $path);
    }
    $_iform_client_helpers_path = $path;
    return $path;
  }
}

/**
 * Returns a list of website IDs that this website is allowed use data for.
 *
 * This is defined by the agreement between the 2 websites and depends on the
 * exact task being performed.
 *
 * @param array $readAuth
 *   Read authorisation tokens.
 * @param string $purpose
 *   One of reporting, peer_review, verification, data_flow, moderation.
 *   Default is 'reporting'. If the agreement defines that the other website
 *   provides data to this website for this purpose, then the other website is
 *   included.
 *
 * @return array
 *   List of website IDs that accesss is allowed for.
 */
function iform_get_allowed_website_ids($readAuth, $purpose = 'reporting') {
  $websites = data_entry_helper::get_population_data(array(
    'table' => 'website',
    'extraParams' => $readAuth + array('sharing' => $purpose),
  ));
  $websiteIds = [];
  foreach ($websites as $website) {
    $websiteIds[] = $website['id'];
  }
  return $websiteIds;
}

/**
 * Implement hook_variable_info.
 * Returns information about the variables declared by this module, allowing an admin interface
 * to be created. We use a couple of custom extensions to allow these to be added to the Indicia
 * settings page.
 *
 * function iform_variable_info($options) {
 * $variable['iform_master_checklist_id']=array(
 * 'title'=>t('Master species checklist'),
 * 'description'=>t('Select the species checklist used as an all species hierarchy.'),
 * 'type'=>'number',
 * 'subtype'=>'taxon_list.title',
 * 'default'=>'',
 * 'addToIndiciaSettingsPage'=>true
 * );
 * return $variable;
 * }
 *
 * /**
 * Test whether update needs to run.
 * @return boolean TRUE if update needed else FALSE.
 *
 * function iform_needs_update() {
 * $needs_update = &drupal_static(__FUNCTION__);
 * if (!isset($needs_update)) {
 * include_once DRUPAL_ROOT . "/includes/install.inc";
 * $version = drupal_get_installed_schema_version('iform');
 * if($version > 0 && $version < 7100) {
 * // Have to run update before iform_load() query can execute.
 * $message = t('The IForm module needs you to run '
 * . '<a href="@url">updates</a> now.', array('@url' => url('update.php')));
 * drupal_set_message($message, 'warning', FALSE);
 * $needs_update = TRUE;
 * }
 * else {
 * $needs_update = FALSE;
 * }
 * }
 * return $needs_update;
 *
 * }
 */

/**
 * Implements hook_token_info().
 *
 * Extends the tokens available to support some tokens useful in the Indicia
 * context, for example a full page URL including the query parameters or a
 * page image that is dynamically set on pages that show record images. The
 * following tokens are provided:
 *
 * * [current-page:full-url] Full URL to the current page, including query
 *   parameters
 * * [current-page:live-title] Title of the current page, reflecting changes
 *   made when calling drupal_set_title.
 * * [current-page:best-image] Image for the page - normally the site logo, but
 *   can be overridden with a record image for example.
 */
function iform_token_info() {
  $info = [];
  $info['types']['current-iform-page'] = [
    'name' => t('Current IForm page'),
    'description' => t('Tokens related to the current Indicia page.'),
  ];

  $info['tokens']['current-iform-page'] = [
    'full-url' => [
      'name' => t('Full URL'),
      'description' => t('Full URL including the page query string parameters, excluding pagination and sort info.'),
    ],
    'title' => [
      'name' => t('Title'),
      'description' => t('Page title reflecting changes for dynamically generated pages.'),
    ],
    'image' => [
      'name' => t('Image'),
      'description' => t('Either the site logo, or an image picked from the content to represent the page.'),
    ],
    'description' => [
      'name' => t('Description'),
      'description' => t('Either the node summary, or a description set by the Indicia page.'),
    ],
    'latitude' => [
      'name' => t('Latitude'),
      'description' => t('Latitude of the data shown on an Indicia page where relevant.'),
    ],
    'longitude' => [
      'name' => t('Longitude'),
      'description' => t('Longitude of the data shown on an Indicia page where relevant.'),
    ],
  ];
  return $info;
}

/**
 * Implements hook_tokens().
 *
 * Returns the values of tokens provided by the iform module.
 */
function iform_tokens($type, $tokens, array $data = [], array $options = []) {
  $replacements = [];
  if ($type == 'current-iform-page') {
    global $iform_page_metadata;
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'full-url':
          $uriParts = explode('?', $_SERVER['REQUEST_URI']);
          if (count($uriParts) > 1) {
            parse_str($uriParts[1], $query);
            // we need to remove sort and paging parameters as they cause search engines to excessively spider
            foreach ($query as $key => $value) {
              if (strpos($key, 'orderby') === 0 || strpos($key, 'sortdir') === 0 || strpos($key, 'page') === 0) {
                unset($query[$key]);
              }
            }
            $uriParts[1] = data_entry_helper::array_to_query_string($query);
          }
          $uri = implode('?', $uriParts);
          $replacements[$original] = "http://$_SERVER[HTTP_HOST]$uri";
          break;

        case 'title':
          if (isset($iform_page_metadata) && isset($iform_page_metadata['title'])) {
            $replacements[$original] = $iform_page_metadata['title'];
          }
          elseif (!empty($data['node'])) {
            $node = $data['node'];
            $replacements[$original] = hostsite_get_page_title($node->id());
          }
          else {
            // If we don't know the page title, set to blank.
            $replacements[$original] = '';
          }
          break;

        case 'image':
          if (isset($iform_page_metadata) && isset($iform_page_metadata['image'])) {
            $replacements[$original] = $iform_page_metadata['image'];
          }
          else {
            $replacements[$original] = theme_get_setting('logo');
          }
          break;

        case 'description':
          if (isset($iform_page_metadata) && isset($iform_page_metadata['description'])) {
            $replacements[$original] = $iform_page_metadata['description'];
          }
          else {
            // Copy of the code for the node:summary token as a fallback
            if (!empty($data['node'])) {
              $node = $data['node'];
              if ($items = field_get_items('node', $node, 'body', LANGUAGE_NONE)) {
                $instance = field_info_instance('node', 'body', $node->type);
                $field_langcode = field_language('node', $node, 'body', LANGUAGE_NONE);
                // If the summary was requested and is not empty, use it.
                if ($name == 'summary' && !empty($items[0]['summary'])) {
                  $output = _text_sanitize($instance, $field_langcode, $items[0], 'summary');
                }
                // Attempt to provide a suitable version of the 'body' field.
                else {
                  $output = _text_sanitize($instance, $field_langcode, $items[0], 'value');
                  // A summary was requested.
                  if ($name == 'summary') {
                    if (isset($instance['display']['teaser']['settings']['trim_length'])) {
                      $trim_length = $instance['display']['teaser']['settings']['trim_length'];
                    }
                    else {
                      // Use default value.
                      $trim_length = NULL;
                    }
                    // Generate an optionally trimmed summary of the body field.
                    $output = text_summary($output, $instance['settings']['text_processing'] ? $items[0]['format'] : NULL, $trim_length);
                  }
                }
                $replacements[$original] = $output;
              }
            }
          }
          break;

        case 'latitude':
          if (!empty($iform_page_metadata['latitude'])) {
            $replacements[$original] = $iform_page_metadata['latitude'];
          }
          break;

        case 'longitude':
          if (!empty($iform_page_metadata['longitude'])) {
            $replacements[$original] = $iform_page_metadata['longitude'];
          }
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Basic support for OpenGraph and other metatags when used with the metatags module.
 *
 * @param $metatags
 * @param $context
 */
function iform_metatags_alter(&$metatags, $context) {
  global $iform_page_metadata;
  $supportedTags = array('title', 'description', 'image', 'latitude', 'longitude');
  foreach ($supportedTags as $tag) {
    if (!empty($iform_page_metadata[$tag])) {
      $metatags["og_$tag"] = $iform_page_metadata[$tag];
      if ($tag === 'title') {
        $metatags['title'] = $iform_page_metadata[$tag];
      }
    }
  }
  // Declare page type as place if we have lat long metadata.
  if (!empty($iform_page_metadata['latitude']) && !empty($iform_page_metadata['longitude'])) {
    $metatags['og_type'] = 'place';
  }
}

/**
 * Implements hook_cron().
 *
 * Cleans up old temporary files.
 */
function iform_cron() {
  // Ensure helper_base is loaded.
  iform_load_helpers(['helper_base']);
  // Cache folder (note, not used if delegating to Drupal caching).
  $cacheFolder = helper_base::$cache_folder ? helper_base::$cache_folder : helper_base::relative_client_helper_path() . 'cache/';
  if (file_exists($cacheFolder)) {
    helper_base::purgeFiles($cacheFolder, helper_base::$cache_timeout * 5, helper_base::$cache_allowed_file_count);
  }
  // Interim images.
  helper_base::purgeFiles(helper_base::getInterimImageFolder(), helper_base::$interim_image_expiry);
  // Data files created for report calendar summary downloads.
  if (file_exists(hostsite_get_public_file_path() . '/reportsDownloads/')) {
    helper_base::purgeFiles(hostsite_get_public_file_path() . '/reportsDownloads/', helper_base::$interim_image_expiry);
  }
}
