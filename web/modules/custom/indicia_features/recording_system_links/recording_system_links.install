<?php

use Drupal\recording_system_links\Utility\SqlLiteLookups;

/**
 * Implements hook_requirements().
 *
 * Prevent install if private file system not configured as we need somewhere
 * safe to store SQLLite lookup data.
 */
function recording_system_links_requirements($phase) {
  $requirements = [];
  if (!\Drupal\Core\Site\Settings::get('file_private_path')) {
    $requirements['recording_system_links_filesystem'] = [
      'title' => t('Private file system'),
      'description' => t('The private file system is not configured so the Recording system links module cannot be installed.'),
      'severity' => REQUIREMENT_ERROR,
    ];
  }
  return $requirements;
}

/**
 * Implements hook_install().
 *
 * Sets up a SQLLite database to store lookup value mapping data.
 */
function recording_system_links_install() {
  $lookups = new SqlLiteLookups();
  $lookups->getDatabase();
}

/**
 * Implements hook_uninstall().
 */
function recording_system_links_uninstall() {
  $lookups = new SqlLiteLookups();
  $lookups->cleanupDatabaseFolder();
}

/**
 * Implements hook_schema().
 */
function recording_system_links_schema() {
  $schema['recording_system_config'] = [
    'description' => 'List of configuration data for recording systems that are available to link to.',
    'fields' => [
      'id' => [
        'description' => 'The primary identifier for the table.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'no export' => TRUE,
      ],
      'title' => [
        'description' => 'Human readable title of the recording system.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ],
      'machine_name' => [
        'description' => 'Machine name of the recording system.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ],
      'description' => [
        'description' => 'Description of the recording system link.',
        'type' => 'text',
      ],
      'oauth2_url' => [
        'description' => 'Base URL of the oAuth2 server.',
        'type' => 'text',
        'not null' => TRUE,
      ],
      'client_id' => [
        'description' => 'Client ID used to access the oAuth2 server.',
        'type' => 'text',
        'not null' => TRUE,
      ],
      'api_provider' => [
        'description' => 'API provider to use (defines the code to use when posting occurrences etc).',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ],
      'survey_ids' => [
        'description' => 'Comma-separated list of survey IDs if this link is limited to a set of surveys.',
        'type' => 'text',
      ],
      'trigger_on_hooks' => [
        'description' => 'Use hooks to immediately sync records added to the website.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
      ],
      'trigger_on_cron' => [
        'description' => 'Use cron to background sync records added to the website.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
      ],
      'trigger_historic_on_link' => [
        'description' => 'When a user links their account, synchronise their historic records.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
      ],
      'lookups' => [
        'description' => 'Key=value pairs (one per line) where the key is a field name (as loaded from the filterable_remote_system_occurrences_report, e.g. lifeStage) and the value is the name of the lookup table to use for this field.',
        'type' => 'text',
      ],
      'created_by' => [
        'description' => 'User id that created the link.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'created' => [
        'description' => 'The Unix timestamp when the link was created.',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ],
      'changed' => [
        'description' => 'The Unix timestamp when the link was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ],
      'changed_by' => [
        'description' => 'User id that changed the link.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'tracking' => [
        'type' => 'int',
        'size' => 'big',
        'description' => 'Tracking number (from cache_occurrences_functional) that synchronisation has been completed up to. Enables selection of just new and updated records.',
        'unsigned' => TRUE,
      ],
    ],
    'primary key' => [
      'id',
    ],
    'unique keys' => [
      'unique_title' => ['title'],
      'unique_machine_name' => ['machine_name'],
    ],
  ];
  $schema['recording_system_oauth_tokens'] = [
    'description' => 'Stores oAuth2 tokens for other recording systems that a user has authenticated against.',
    'fields' => [
      'uid' => [
        'description' => 'Uid for user who authenticated against another recording system.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'recording_system_config_id' => [
        'description' => 'ID of the recording system config the tokens are for.',
        'type' => 'int',
        'not null' => TRUE,
      ],
      'access_token' => [
        'description' => 'oAuth2 access token, granted when a user authenticates.',
        'type' => 'text',
        'not null' => TRUE,
      ],
      'refresh_token' => [
        'description' => 'Refresh token used to obtain a new access token when the access token expires.',
        'type' => 'text',
        'default' => NULL,
      ],
      'expiry' => [
        'description' => 'Unix timestamp of expected expiry.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'changed' => array(
        'description' => 'The Unix timestamp when the tokens record was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
    ],
    'primary key' => [
      'uid',
      'recording_system_config_id',
    ],
    'foreign keys' => [
      'recording_system_config' => [
        'table' => 'recording_system_config',
        'columns' => ['recording_system_config_id' => 'id'],
      ],
    ],
  ];
  return $schema;
}